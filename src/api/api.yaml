openapi: 3.0.3
info:
  title: Game Score Manager API
  version: 1.3.9
  description: Swagger for Game Score Manager
  contact:
    email: desarrollo070615@gmail.com
    name: Leidy Santos
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:3000/api/v1/
  - url: http://172.10.10.1:3000/api/v1/
tags:
  - name: Users
    description: Domain about user data
  - name: Scores
    description: Domain about scores data
  - name: Authentication
    description: Domain about authentication options
paths:
  /auth/register:
    post:
      summary: Create user
      tags:
        - Authentication
      description: Register user with email or username, and password
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuId
                  example: 45247989-8807-4cec-bf65-50632859a8f5
                name:
                  type: string
                  example: Leidy Santos
                username:  # corregido de ussername
                  type: string
                  example: lsantos
                email:
                  type: string
                  format: email
                  example: prueba@yopmail.com
                password:
                  type: string
                  format: password
                  example: Ch0c0lat32024#
                role:
                  type: string
                  example: admin
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '409':
          description: User Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse409'
  /auth/login:
    post:
      summary: Login user
      tags: 
        - Authentication
      description: Login user with username and password
      operationId: login
      requestBody: 
        required: true
        content:
          application/json: 
            schema:
              type: object
              properties:
                username:  # corregido de ussername
                  type: string
                  example: lsantos
                password:
                  type: string
                  format: password
                  example: Ch0c0lat32024#
      responses: 
        '200':
          description: Login successful
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
  /users/profile/{userId}:
    get: 
      summary: Get user profile
      tags:
        - Users
      description: Get user profile details by ID
      operationId: profile
      parameters:
        - name: userId
          in: path
          description: The ID of the user to be fetched.
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
    put:
      summary: Update user profile
      tags:
        - Users
      description: Update user profile by ID
      parameters:
        - name: userId
          in: path
          description: The ID of the user to be updated.
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User profile updated successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '204':
          description: User profile created successfully (if user did not exist)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse201'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'         
  /users/scores/{userId}: 
    get: 
      summary: Get user scores
      tags:
        - Scores
      description: Get scores of a user by ID
      operationId: scores
      parameters:
        - name: userId
          in: path
          description: The ID of the user whose scores need to be fetched.
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: User scores retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/ScoreResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'       
  /scores/{userId}:
    post: 
      tags: 
        - Scores
      summary: Create score
      description: Create a new score for the user
      parameters:
        - name: userId
          in: path
          description: The ID of the user to associate the score with.
          required: true
          schema: 
            type: string 
      requestBody:
        description: Created score object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreResponse201'
      responses:
        '201':
          description: Score created successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
  /scores/leaderboard:
    get:
      summary: Get global scores
      tags:
        - Scores
      description: Get top scores globally
      responses:
        '200':
          description: Global scores retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/ScoreResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
  /users/admin:
    get:
      summary: Get all users (admin only)
      tags:
        - Users
      description: Get all users (admin only access)
      responses:
        '200':
          description: All users retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
  /users/admin/{userId}:
    patch:
      summary: Enable or block user (admin only)
      tags:
        - Users
      description: Enable or block a user by admin
      parameters:
        - name: userId
          in: path
          description: The ID of the user to enable or block.
          required: true
          schema: 
            type: string 
      responses:
        '200':
          description: User enabled or blocked successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
    delete:
      summary: Delete user (admin only)
      tags:
        - Users
      description: Delete a user by admin
      parameters:
        - name: userId
          in: path
          description: The ID of the user to delete.
          required: true
          schema: 
            type: string 
      responses:
        '200':
          description: User deleted successfully
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse401'
        '400':
          description: User bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuId
        name:
          type: string
          example: Leidy Santos
        username:
          type: string
          example: lsantos
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          example: admin
    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
    ScoreResponse:
      type: object
      properties:
        id:
          type: string
        score:
          type: integer
          example: 100
        date:
          type: string
          format: date
        game:
          type: string
    ScoreResponse201:
      type: object
      properties:
        score:
          type: integer
          example: 100
        game:
          type: string
    ErrorResponse400:
      type: object
      properties:
        message:
          type: string
          example: Invalid request
    ErrorResponse401:
      type: object
      properties:
        message:
          type: string
          example: Unauthorized
    ErrorResponse409:
      type: object
      properties:
        message:
          type: string
          example: Conflict error
